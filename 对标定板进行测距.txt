//标定、校正、SIFT匹配、测距
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <iostream>
#include <fstream>
#include <opencv2\imgproc\types_c.h>

using namespace cv;
using namespace std;

//***************************参数以及初始化******************************//
//Matlab和OpenCV进行相机标定得到的参数矩阵全是互为转置的!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

const char* imageName_L = "C:/Users/hiter/Pictures/Camera Roll/2023年4月14日60cm基线标定2/MER2-502-79U3C(FCA22100486)/MER2-502-79U3C(FCA22100486)_2023-04-14_20_16_31_519-24.png"; // 用于检测深度的图像
const char* imageName_R = "C:/Users/hiter/Pictures/Camera Roll/2023年4月14日60cm基线标定2/MER2-502-79U3C(FCA22080343)/MER2-502-79U3C(FCA22080343)_2023-04-14_20_16_31_523-24.png";
const char* stereoRectifyParams = "./image/stereoRectifyParams.txt"; // 存放立体校正参数

Mat cameraMatrix_L = (cv::Mat_<float>(3, 3) <<
	11487, 0, 556.52,
	0, 11650, 317.16,
	0, 0, 1); // 左相机的内参数
Mat cameraMatrix_R = (cv::Mat_<float>(3, 3) << 
	11528, 0, 692.46,
	0, 11666, 259.28,
	0, 0, 1); // 右相机的内参数
//左右相机畸变系数 最后一个参数置0的话效果不一样
Mat distCoeffs_L = (Mat_<float>(1, 4) << -0.24197, 2.9625, -0.013407, 0.0092624); // 左相机的畸变系数
Mat distCoeffs_R = (Mat_<float>(1, 4) << -0.27623, 3.4843, -0.012217, 0.0029756);// 右相机的畸变系数
//旋转矩阵
Mat R = (cv::Mat_<double>(3, 3) << 
	0.99963, -0.0067959, -0.02649,
	0.0067792, 0.99998, -0.00072047,
	0.026494, 0.00054062, 0.99965);

//平移矩阵
Mat T = (cv::Mat_<double>(3, 1) << 
	-605.96,
	- 28.785,
	- 41.373);
// 图像尺寸
Size imageSize(2448, 2048);
Size patternSize = Size(4, 6); // 行列内角点个数


Mat R1, R2, P1, P2, Q; // 立体校正参数
Mat mapl1, mapl2, mapr1, mapr2; // 图像重投影映射表
Mat img1_rectified, img2_rectified, result3DImage; // 校正图像  深度图
Rect validRoi[2];



/*
立体校正
参数：
	stereoRectifyParams	存放立体校正结果的txt
	cameraMatrix			相机内参数
	distCoeffs				相机畸变系数
	imageSize				图像尺寸
	R						左右相机相对的旋转矩阵
	T						左右相机相对的平移向量
	R1, R2					行对齐旋转校正
	P1, P2					左右投影矩阵
	Q						重投影矩阵
	map1, map2				重投影映射表
*/

Rect stereoRectification(const char* stereoRectifyParams, Mat& cameraMatrix1, Mat& distCoeffs1, Mat& cameraMatrix2, Mat& distCoeffs2,
	Size& imageSize, Mat& R, Mat& T, Mat& R1, Mat& R2, Mat& P1, Mat& P2, Mat& Q, Mat& mapl1, Mat& mapl2, Mat& mapr1, Mat& mapr2)
{
	Rect validRoi[2];
	ofstream stereoStore(stereoRectifyParams);
	stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize,
		R, T, R1, R2, P1, P2, Q, CALIB_ZERO_DISPARITY, 0, imageSize, &validRoi[0], &validRoi[1]);
	// 计算左右图像的重投影映射表
	stereoStore << "R1：" << endl;
	stereoStore << R1 << endl;
	stereoStore << "R2：" << endl;
	stereoStore << R2 << endl;
	stereoStore << "P1：" << endl;
	stereoStore << P1 << endl;
	stereoStore << "P2：" << endl;
	stereoStore << P2 << endl;
	stereoStore << "Q：" << endl;
	stereoStore << Q << endl;
	stereoStore.close();
	cout << "R1:" << endl;
	cout << R1 << endl;
	cout << "R2:" << endl;
	cout << R2 << endl;
	cout << "P1:" << endl;
	cout << P1 << endl;
	cout << "P2:" << endl;
	cout << P2 << endl;
	cout << "Q:" << endl;
	cout << Q << endl;
	initUndistortRectifyMap(cameraMatrix1, distCoeffs1, R1, P1, imageSize, CV_32FC1, mapl1, mapl2);
	initUndistortRectifyMap(cameraMatrix2, distCoeffs2, R2, P2, imageSize, CV_32FC1, mapr1, mapr2);
	return validRoi[0], validRoi[1];
}

/*
计算视差图
参数：
	imageName1	左相机拍摄的图像
	imageName2	右相机拍摄的图像
	img1_rectified	重映射后的左侧相机图像
	img2_rectified	重映射后的右侧相机图像
	map	重投影映射表
*/
bool computeChessboardDistance(const char* imageName1, const char* imageName2, Mat& img1_rectified,
	Mat& img2_rectified, Mat& mapl1, Mat& mapl2, Mat& mapr1, Mat& mapr2, Rect validRoi[2])
{
	// 首先，对左右相机的两张图片进行重构
	Mat img1 = imread(imageName1);
	Mat img2 = imread(imageName2);
	if (img1.empty() | img2.empty())
	{
		cout << "图像为空" << endl;
	}
	Mat gray_img1, gray_img2;
	cvtColor(img1, gray_img1, COLOR_BGR2GRAY);
	cvtColor(img2, gray_img2, COLOR_BGR2GRAY);
	Mat canvas(imageSize.height, imageSize.width * 2, CV_8UC1); // 注意数据类型
	Mat canLeft = canvas(Rect(0, 0, imageSize.width, imageSize.height));
	Mat canRight = canvas(Rect(imageSize.width, 0, imageSize.width, imageSize.height));
	gray_img1.copyTo(canLeft);
	gray_img2.copyTo(canRight);
	imwrite("./image/校正前左右相机图像.jpg", canvas);
	remap(gray_img1, img1_rectified, mapl1, mapl2, INTER_LINEAR);
	remap(gray_img2, img2_rectified, mapr1, mapr2, INTER_LINEAR);
	imwrite("./image/左相机校正图像.jpg", img1_rectified);
	imwrite("./image/右相机校正图像.jpg", img2_rectified);
	img1_rectified.copyTo(canLeft);
	img2_rectified.copyTo(canRight);
	rectangle(canLeft, validRoi[0], Scalar(255, 255, 255), 5, 8);
	rectangle(canRight, validRoi[1], Scalar(255, 255, 255), 5, 8);
	for (int j = 0; j <= canvas.rows; j += 16)
		line(canvas, Point(0, j), Point(canvas.cols, j), Scalar(0, 255, 0), 1, 8);
	imwrite("./image/校正后左右相机图像.jpg", canvas);

	//获取图像上角点
	vector<Point2f> cornersL, cornersR;
	bool flagL = false, flagR = false;
	flagL = findChessboardCorners(img1_rectified, patternSize, cornersL); // 最后一个参数int flags的缺省值为：CALIB_CB_ADAPTIVE_THRESH | CALIB_CB_NORMALIZE_IMAGE
	flagR = findChessboardCorners(img2_rectified, patternSize, cornersR); // 最后一个参数int flags的缺省值为：CALIB_CB_ADAPTIVE_THRESH | CALIB_CB_NORMALIZE_IMAGE
	if ((flagL == false) || (flagR == false)) {
		cout << "没有找全角点,角点个数： " << cornersL.size() << " " << cornersR.size() << endl;
		return false;
		
	}
	
	Mat chessL, chessR;
	chessL = img1_rectified;
	chessR = img2_rectified;
	drawChessboardCorners(chessL, patternSize, cornersL,true);
	drawChessboardCorners(chessR, patternSize, cornersR, true);
	for (int i = 0; i < cornersL.size(); i++) {
		putText(chessL, to_string(i), cornersL[i], cv::FONT_HERSHEY_SIMPLEX, 0.8, Scalar(255, 0, 0), 1);
		putText(chessR, to_string(i), cornersR[i], cv::FONT_HERSHEY_SIMPLEX, 0.8, Scalar(255, 0, 0), 1);
	}
	Mat outimg(imageSize.height, imageSize.width * 2, CV_8UC1); // 注意数据类型
	Mat outimgLeft = outimg(Rect(0, 0, imageSize.width, imageSize.height));
	Mat outimgRight = outimg(Rect(imageSize.width, 0, imageSize.width, imageSize.height));
	chessL.copyTo(outimgLeft);
	chessR.copyTo(outimgRight);
	imwrite("./image/标定板角点提取并测距.png", outimg);
	
	/********相似三角形测距法 计算距离*******/
	double B = sqrt(T.at<double>(0, 0) * T.at<double>(0, 0) + T.at<double>(1, 0) * T.at<double>(1, 0) + T.at<double>(2, 0) * T.at<double>(2, 0));
	double f = Q.at<double>(2, 3);
	double avr_dis = 0;
	double max_dis = LONG_MIN, min_dis = LONG_MAX;
	Point origin;
	cout << "f = " << f << endl;
	cout << "B = " << B << endl;
	cout << "********************************************" << endl;
	for (int i = 0; i < cornersL.size(); i++)
	{
		double x_L = cornersL[i].x;
		double x_R = cornersR[i].x;
		double y_L = cornersL[i].y;
		double y_R = cornersR[i].y;
		double Zc = f * B / abs(x_L - x_R);
		double Xc, Yc;
		Xc = (Zc * x_L) / f;
		Yc = (Zc * y_L) / f;
		cout << i << " 角点的坐标为: (" << Xc << ", " << Yc << ", " << Zc << ") 单位: mm" << endl;
	}
	return true;
}

// 鼠标回调函数，点击视差图显示深度
void onMouse(int event, int x, int y, int flags, void* param)
{
	Point point;
	point.x = x;
	point.y = y;
	if (event == EVENT_LBUTTONDOWN)
	{
		cout << result3DImage.at<Vec3f>(point) << endl;
	}
}

int main()
{
	//进行立体校正
	validRoi[0], validRoi[1] = stereoRectification(stereoRectifyParams, cameraMatrix_L, distCoeffs_L, cameraMatrix_R, distCoeffs_R,
		imageSize, R, T, R1, R2, P1, P2, Q, mapl1, mapl2, mapr1, mapr2);
	cout << "已创建图像重投影映射表！" << endl;
	//对标定板的原点进行测距
	computeChessboardDistance(imageName_L, imageName_R, img1_rectified, img2_rectified, mapl1, mapl2, mapr1, mapr2, validRoi);
	waitKey(0);  //等待键盘输入
	return 0;
}



