//标定、校正、SIFT匹配、测距
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <iostream>
#include <fstream>
#include <opencv2\imgproc\types_c.h>

using namespace cv;
using namespace std;

//***************************参数以及初始化******************************//
//Matlab和OpenCV进行相机标定得到的参数矩阵全是互为转置的!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

const char* imageName_L = "C:/Users/hiter/Pictures/Camera Roll/2023年4月15日2.5m基50m标定2/MER2-502-79U3C(FCA22100486)/MER2-502-79U3C(FCA22100486)_2023-04-15_17_07_24_128-35.png"; // 用于检测深度的图像
const char* imageName_R = "C:/Users/hiter/Pictures/Camera Roll/2023年4月15日2.5m基50m标定2/MER2-502-79U3C(FCA22080343)/MER2-502-79U3C(FCA22080343)_2023-04-15_17_07_24_132-35.png";
const char* stereoRectifyParams = "./image/stereoRectifyParams.txt"; // 存放立体校正参数

Mat cameraMatrix_L = (cv::Mat_<float>(3, 3) <<
	9733, 0, 1264,
	0, 9740.1, 1303.6,
	0, 0, 1); // 左相机的内参数
Mat cameraMatrix_R = (cv::Mat_<float>(3, 3) <<
	9728.9, 0, 1213.5,
	0, 9731.3, 1274.6,
	0, 0, 1); // 右相机的内参数
//左右相机畸变系数 最后一个参数置0的话效果不一样
Mat distCoeffs_L = (Mat_<float>(1, 4) << 0.2067, -4.5212, 0.010678, 0.00096585); // 左相机的畸变系数
Mat distCoeffs_R = (Mat_<float>(1, 4) << 0.04345, 1.4281, 0.0065077, 0.00011789);// 右相机的畸变系数
//旋转矩阵
Mat R = (cv::Mat_<double>(3, 3) <<
	0.99712, -0.017167, 0.073855,
	0.017884, 0.9998, -0.00906,
	- 0.073684, 0.010355, 0.99723);

//平移矩阵
Mat T = (cv::Mat_<double>(3, 1) <<
	-2493.4,
	- 75.671,
	468.34);
// 图像尺寸
Size imageSize(2448, 2048);
Mat R1, R2, P1, P2, Q; // 立体校正参数
Mat mapl1, mapl2, mapr1, mapr2; // 图像重投影映射表
Mat img1_rectified, img2_rectified; // 校正图像  深度图
Rect validRoi[2];
//设定特征提取区域
Rect rect;


//RANSAC算法实现
void ransac(vector<DMatch> matches, vector<KeyPoint> queryKeyPoint, vector<KeyPoint> trainKeyPoint, vector<DMatch>& matches_ransac)
{
	//定义保存匹配点对坐标
	vector<Point2f> srcPoints(matches.size()), dstPoints(matches.size());
	//保存从关键点中提取到的匹配点对的坐标
	for (int i = 0; i < matches.size(); i++)
	{
		srcPoints[i] = queryKeyPoint[matches[i].queryIdx].pt;
		dstPoints[i] = trainKeyPoint[matches[i].trainIdx].pt;
	}

	//匹配点对进行RANSAC过滤
	vector<int> inliersMask(srcPoints.size());
	//Mat homography;
	//homography = findHomography(srcPoints, dstPoints, RANSAC, 5, inliersMask);
	findHomography(srcPoints, dstPoints, RANSAC, 5, inliersMask);
	//手动的保留RANSAC过滤后的匹配点对
	for (int i = 0; i < inliersMask.size(); i++)
		if (inliersMask[i])
			matches_ransac.push_back(matches[i]);
}



/*
立体校正
参数：
	stereoRectifyParams	存放立体校正结果的txt
	cameraMatrix			相机内参数
	distCoeffs				相机畸变系数
	imageSize				图像尺寸
	R						左右相机相对的旋转矩阵
	T						左右相机相对的平移向量
	R1, R2					行对齐旋转校正
	P1, P2					左右投影矩阵
	Q						重投影矩阵
	map1, map2				重投影映射表
*/

Rect stereoRectification(const char* stereoRectifyParams, Mat& cameraMatrix1, Mat& distCoeffs1, Mat& cameraMatrix2, Mat& distCoeffs2,
	Size& imageSize, Mat& R, Mat& T, Mat& R1, Mat& R2, Mat& P1, Mat& P2, Mat& Q, Mat& mapl1, Mat& mapl2, Mat& mapr1, Mat& mapr2)
{
	Rect validRoi[2];
	ofstream stereoStore(stereoRectifyParams);
	stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize,
		R, T, R1, R2, P1, P2, Q, CALIB_ZERO_DISPARITY, 0, imageSize, &validRoi[0], &validRoi[1]);
	// 计算左右图像的重投影映射表
	stereoStore << "R1：" << endl;
	stereoStore << R1 << endl;
	stereoStore << "R2：" << endl;
	stereoStore << R2 << endl;
	stereoStore << "P1：" << endl;
	stereoStore << P1 << endl;
	stereoStore << "P2：" << endl;
	stereoStore << P2 << endl;
	stereoStore << "Q：" << endl;
	stereoStore << Q << endl;
	stereoStore.close();
	cout << "R1:" << endl;
	cout << R1 << endl;
	cout << "R2:" << endl;
	cout << R2 << endl;
	cout << "P1:" << endl;
	cout << P1 << endl;
	cout << "P2:" << endl;
	cout << P2 << endl;
	cout << "Q:" << endl;
	cout << Q << endl;
	initUndistortRectifyMap(cameraMatrix1, distCoeffs1, R1, P1, imageSize, CV_32FC1, mapl1, mapl2);
	initUndistortRectifyMap(cameraMatrix2, distCoeffs2, R2, P2, imageSize, CV_32FC1, mapr1, mapr2);
	return validRoi[0], validRoi[1];
}

/*
计算视差图
参数：
	imageName1	左相机拍摄的图像
	imageName2	右相机拍摄的图像
	img1_rectified	重映射后的左侧相机图像
	img2_rectified	重映射后的右侧相机图像
	map	重投影映射表
*/
bool computeDisparityImage(const char* imageName1, const char* imageName2, Mat& img1_rectified,
	Mat& img2_rectified, Mat& mapl1, Mat& mapl2, Mat& mapr1, Mat& mapr2, Rect validRoi[2])
{
	// 首先，对左右相机的两张图片进行重构
	Mat img1 = imread(imageName1);
	Mat img2 = imread(imageName2);
	if (img1.empty() | img2.empty())
	{
		cout << "图像为空" << endl;
	}

	//提取红色通道
	vector<Mat> img1color, img2color;
	split(img1, img1color);
	split(img2, img2color);
	//对红色通道进行处理
	Mat gray_img1, gray_img2;
	gray_img1 = img1color[2];
	gray_img2 = img2color[2];

	//cvtColor(img1, gray_img1, COLOR_BGR2GRAY);
	//cvtColor(img2, gray_img2, COLOR_BGR2GRAY);

	Mat canvas(imageSize.height, imageSize.width * 2, CV_8UC1); // 注意数据类型
	Mat canLeft = canvas(Rect(0, 0, imageSize.width, imageSize.height));
	Mat canRight = canvas(Rect(imageSize.width, 0, imageSize.width, imageSize.height));
	gray_img1.copyTo(canLeft);
	gray_img2.copyTo(canRight);
	imwrite("./image/校正前左右相机图像.jpg", canvas);
	remap(gray_img1, img1_rectified, mapl1, mapl2, INTER_LINEAR);
	remap(gray_img2, img2_rectified, mapr1, mapr2, INTER_LINEAR);
	imwrite("./image/左相机校正图像.jpg", img1_rectified);
	imwrite("./image/右相机校正图像.jpg", img2_rectified);
	img1_rectified.copyTo(canLeft);
	img2_rectified.copyTo(canRight);
	rectangle(canLeft, validRoi[0], Scalar(255, 255, 255), 5, 8);
	rectangle(canRight, validRoi[1], Scalar(255, 255, 255), 5, 8);
	for (int j = 0; j <= canvas.rows; j += 16)
		line(canvas, Point(0, j), Point(canvas.cols, j), Scalar(0, 255, 0), 1, 8);
	imwrite("./image/校正后左右相机图像.jpg", canvas);


	// 进行SIFT特征点提取与匹配
	std::vector<cv::KeyPoint> keypoints1;
	std::vector<cv::KeyPoint> keypoints2;
	cv::Ptr<cv::SiftFeatureDetector> sift = cv::SiftFeatureDetector::create();

	 rect = Rect(979.2, 409.6, 1468.8, 1228.8);
	//img1_rectified = img1_rectified(rect);
	//img2_rectified = img2_rectified(rect);


	// 2. 计算特征点
	sift->detect(img1_rectified, keypoints1);
	sift->detect(img2_rectified, keypoints2);

	// 3. 计算特征描述符
	cv::Mat descriptors1, descriptors2;
	sift->compute(img1_rectified, keypoints1, descriptors1);
	sift->compute(img2_rectified, keypoints2, descriptors2);

	// 4. 特征匹配
	cv::Ptr<cv::DescriptorMatcher> matcher = cv::DescriptorMatcher::create(cv::DescriptorMatcher::BRUTEFORCE);
	//  直接暴力匹配
	std::vector<cv::DMatch> matches;
	matcher->match(descriptors1, descriptors2, matches);
	// 画匹配图
	cv::Mat img_matches_bf;
	drawMatches(img1_rectified, keypoints1, img2_rectified, keypoints2, matches, img_matches_bf);
	//imshow("暴力匹配", img_matches_bf);
	imwrite("./image/暴力匹配.jpg", img_matches_bf);
	vector<DMatch>  good_min, good_ransac;
	//用ransac算法筛选暴力匹配结果
	ransac(matches, keypoints1, keypoints2, good_ransac);
	cout << "good_matches.size=" << good_ransac.size() << endl;

	//不使用RANSAC筛选结果
	good_ransac = matches;

	Mat  outimg;
	drawMatches(img1_rectified, keypoints1, img2_rectified, keypoints2, good_ransac, outimg,
		cv::Scalar::all(-1), cv::Scalar::all(-1), vector<char>(), cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);


	/********相似三角形测距法 计算距离*******/
	double B = sqrt(T.at<double>(0, 0) * T.at<double>(0, 0) + T.at<double>(1, 0) * T.at<double>(1, 0) + T.at<double>(2, 0) * T.at<double>(2, 0));
	double f = Q.at<double>(2, 3);
	double avr_dis = 0;
	double max_dis = LONG_MIN, min_dis = LONG_MAX;
	Point origin;
	cout << "f = " << f << endl;
	cout << "B = " << B << endl;
	cout << "********************************************" << endl;
	for (int i = 0; i < good_ransac.size(); i++)
	{
		double x_L = keypoints1[good_ransac[i].queryIdx].pt.x;
		double x_R = keypoints2[good_ransac[i].trainIdx].pt.x;
		double y_L = keypoints1[good_ransac[i].queryIdx].pt.y;
		double y_R = keypoints2[good_ransac[i].trainIdx].pt.y;
		origin.x = keypoints1[good_ransac[i].queryIdx].pt.x;
		origin.y = keypoints1[good_ransac[i].queryIdx].pt.y;

		putText(outimg, to_string(good_ransac[i].queryIdx), origin, cv::FONT_HERSHEY_SIMPLEX, 0.4, Scalar(0, 0, 255), 1);
		double Zc = f * B / abs(x_L - x_R);
		double Xc, Yc, edistance;
		Xc = (Zc * (x_L + Q.at<double>(0, 3))) / f;
		Yc = (Zc * (y_L + Q.at<double>(1, 3))) / f;
		edistance = sqrt(Zc * Zc + Xc * Xc + Yc * Yc);
		cout << to_string(good_ransac[i].queryIdx) << " 点的坐标为: (" << Xc << ", " << Yc << ", " << Zc << ") 欧氏距离为：" << edistance << " 单位: mm" << endl;
		cout << "   视差大小：" << abs(x_L - x_R) << endl;

	}
	//imshow("ransac算法筛选暴力匹配结果", outimg);
	imwrite("./image/ransac算法筛选暴力匹配结果.jpg", outimg);
	return true;
}

//提取图片质心方法测距  需要先运行computeDisparityImage（）函数
bool centroidDistance()
{
	
	// 定义变量存放读入图像、转换后的图像以及阈值
	Mat srcL, thrL;
	Mat srcR, thrR;
	//使用矫正后的红色通道图像
	srcL = img1_rectified;
	srcR = img2_rectified;
	// 将像素值二值化，如果当前位置像素值大于100，则为255；否则为0  如果图像中不仅显示光斑还显示了其他背景点，就更改该值重试
	threshold(srcL, thrL, 150, 255, THRESH_BINARY);
	threshold(srcR, thrR, 150, 255, THRESH_BINARY);
	//imshow("thrL", thrL);
	//imshow("thrR", thrR);
	// 得到二值图像的矩，第二个参数为true表示输入为二值图像，即所有非零像素点值为1
	Moments mL = moments(thrL, true);
	Moments mR = moments(thrR, true);
	// 得到中心坐标，即质心坐标
	Point2f pL(double(mL.m10 / mL.m00), mL.m01 / mL.m00);
	Point2f pR(double(mR.m10 / mR.m00), mR.m01 / mR.m00);
	// 绘制中心坐标
	circle(srcL, pL, 5, Scalar(128, 128, 0), -1);
	circle(srcR, pR, 5, Scalar(128, 128, 0), -1);
	//imshow("srcL", srcL);
	//imshow("srcR", srcR);
	imwrite("./image/左图像光心提取结果.png", srcL);
	imwrite("./image/右图像光心提取结果.png", srcR);
	//基于光心坐标计算距离
	double B = sqrt(T.at<double>(0, 0) * T.at<double>(0, 0) + T.at<double>(1, 0) * T.at<double>(1, 0) + T.at<double>(2, 0) * T.at<double>(2, 0));
	double f = Q.at<double>(2, 3);
	double Zc = f * B / abs(pL.x - pR.x);
	double Xc, Yc, edistance;
	Xc = (Zc * (pL.x + Q.at<double>(0, 3))) / f;
	Yc = (Zc * (pL.y + Q.at<double>(1, 3))) / f;
	edistance = sqrt(Zc * Zc + Xc * Xc + Yc * Yc);
	cout << "*************" << endl;
	cout << "基于Hu不变矩提取光心计算距离，注意检查二值化图像是否只有光斑点，不能有噪声背景点！！！！！" << endl;
	cout << " 光心的坐标为: (" << Xc << ", " << Yc << ", " << Zc << ") 欧氏距离为：" << edistance << " 单位: mm" << endl;
	cout << "   视差大小：" << abs(pL.x - pR.x) << endl;
	// 输出中心坐标
	cout << "左图光心像素坐标为： (" << pL.x << "，" << pL.y << ")" << endl;
	cout << "右图光心像素坐标为： (" << pR.x << "，" << pR.y << ")" << endl;
	return true;
}

int main()
{
	//进行立体校正
	validRoi[0], validRoi[1] = stereoRectification(stereoRectifyParams, cameraMatrix_L, distCoeffs_L, cameraMatrix_R, distCoeffs_R,
		imageSize, R, T, R1, R2, P1, P2, Q, mapl1, mapl2, mapr1, mapr2);
	cout << "已创建图像重投影映射表！" << endl;
	//SIFT特征点提取与匹配
	computeDisparityImage(imageName_L, imageName_R, img1_rectified, img2_rectified, mapl1, mapl2, mapr1, mapr2, validRoi);
	//提取质心方法测距
	centroidDistance();
	cout << "********************************************" << endl;
	waitKey(0);  //等待键盘输入
	return 0;
}



