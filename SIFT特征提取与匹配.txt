#include <iostream>
#include <opencv2/highgui.hpp>
#include <opencv2/core.hpp>
#include <opencv2/xfeatures2d.hpp>
#include <opencv2\opencv.hpp>
#include <vector>
using namespace std;
using namespace cv;

void match_min(vector<DMatch> matches, vector<DMatch>& good_matches)
{
    double min_dist = 10000, max_dist = 0;
    for (int i = 0; i < matches.size(); i++)
    {
        double dist = matches[i].distance;
        if (dist < min_dist) min_dist = dist;
        if (dist > max_dist) max_dist = dist;
    }
    cout << "min_dist=" << min_dist << endl;
    cout << "max_dist=" << max_dist << endl;

    for (int i = 0; i < matches.size(); i++)
        if (matches[i].distance <= max(2 * min_dist, 20.0))
            good_matches.push_back(matches[i]);
}

//RANSAC算法实现
void ransac(vector<DMatch> matches, vector<KeyPoint> queryKeyPoint, vector<KeyPoint> trainKeyPoint, vector<DMatch>& matches_ransac)
{
    //定义保存匹配点对坐标
    vector<Point2f> srcPoints(matches.size()), dstPoints(matches.size());
    //保存从关键点中提取到的匹配点对的坐标
    for (int i = 0; i < matches.size(); i++)
    {
        srcPoints[i] = queryKeyPoint[matches[i].queryIdx].pt;
        dstPoints[i] = trainKeyPoint[matches[i].trainIdx].pt;
    }

    //匹配点对进行RANSAC过滤
    vector<int> inliersMask(srcPoints.size());
    //Mat homography;
    //homography = findHomography(srcPoints, dstPoints, RANSAC, 5, inliersMask);
    findHomography(srcPoints, dstPoints, RANSAC, 5, inliersMask);
    //手动的保留RANSAC过滤后的匹配点对
    for (int i = 0; i < inliersMask.size(); i++)
        if (inliersMask[i])
            matches_ransac.push_back(matches[i]);
}
int main() {
    int64 t1, t2;
    double tkpt, tdes, tmatch_bf, tmatch_knn;

    // 1. 读取图片
    const cv::Mat image1 = cv::imread("C:/Users/hiter/Pictures/Camera Roll/A.png", 0); //Load as grayscale
    const cv::Mat image2 = cv::imread("C:/Users/hiter/Pictures/Camera Roll/B.png", 0); //Load as grayscale
    std::vector<cv::KeyPoint> keypoints1;
    std::vector<cv::KeyPoint> keypoints2;

    cv::Ptr<cv::SiftFeatureDetector> sift = cv::SiftFeatureDetector::create();
    // 2. 计算特征点
    t1 = cv::getTickCount();
    sift->detect(image1, keypoints1);
    t2 = cv::getTickCount();
    tkpt = 1000.0 * (t2 - t1) / cv::getTickFrequency();
    sift->detect(image2, keypoints2);


    // 3. 计算特征描述符
    cv::Mat descriptors1, descriptors2;
    t1 = cv::getTickCount();
    sift->compute(image1, keypoints1, descriptors1);
    t2 = cv::getTickCount();
    tdes = 1000.0 * (t2 - t1) / cv::getTickFrequency();
    sift->compute(image2, keypoints2, descriptors2);


    // 4. 特征匹配
    cv::Ptr<cv::DescriptorMatcher> matcher = cv::DescriptorMatcher::create(cv::DescriptorMatcher::BRUTEFORCE);
    // cv::BFMatcher matcher(cv::NORM_L2);

    // (1) 直接暴力匹配
    std::vector<cv::DMatch> matches;
    t1 = cv::getTickCount();
    matcher->match(descriptors1, descriptors2, matches);
    t2 = cv::getTickCount();
    tmatch_bf = 1000.0 * (t2 - t1) / cv::getTickFrequency();
    // 画匹配图
    cv::Mat img_matches_bf;
    drawMatches(image1, keypoints1, image2, keypoints2, matches, img_matches_bf);
    imshow("bf_matches", img_matches_bf);

    // (2) KNN-NNDR匹配法
    std::vector<std::vector<cv::DMatch> > knn_matches;
    const float ratio_thresh = 0.7f;
    std::vector<cv::DMatch> good_matches;
    t1 = cv::getTickCount();
    matcher->knnMatch(descriptors1, descriptors2, knn_matches, 2);
    for (auto& knn_matche : knn_matches) {
        if (knn_matche[0].distance < ratio_thresh * knn_matche[1].distance) {
            good_matches.push_back(knn_matche[0]);
        }
    }
    t2 = cv::getTickCount();
    tmatch_knn = 1000.0 * (t2 - t1) / cv::getTickFrequency();

    // 画匹配图
    cv::Mat img_matches_knn;
    drawMatches(image1, keypoints1, image2, keypoints2, good_matches, img_matches_knn, cv::Scalar::all(-1),
        cv::Scalar::all(-1), std::vector<char>(), cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);
    cv::imshow("knn_matches", img_matches_knn);

    vector<DMatch>  good_min, good_ransac;
    //最小汉明距离筛选暴力匹配结果
    match_min(matches, good_min);
    cout << "good_min=" << good_min.size() << endl;

    //用ransac算法筛选暴力匹配结果
    ransac(good_min, keypoints1, keypoints2, good_ransac);
    cout << "good_matches.size=" << good_ransac.size() << endl;

    Mat  outimg1, outimg2;
    drawMatches(image1, keypoints1, image2, keypoints2, good_min, outimg1);
    drawMatches(image1, keypoints1, image2, keypoints2, good_ransac, outimg2);
    imshow("最小汉明距离筛选暴力匹配结果", outimg1);
    imshow("ransac算法筛选暴力匹配结果", outimg2);
    waitKey(0);  //等待键盘输入

/*
    cv::Mat output;
    cv::drawKeypoints(image1, keypoints1, output);
    cv::imwrite("sift_image1_keypoints.jpg", output);
    cv::drawKeypoints(image2, keypoints2, output);
    cv::imwrite("sift_image2_keypoints.jpg", output);
*/



    std::cout << "图1特征点检测耗时(ms)：" << tkpt << std::endl;
    std::cout << "图1特征描述符耗时(ms)：" << tdes << std::endl;
    std::cout << "BF特征匹配耗时(ms)：" << tmatch_bf << std::endl;
    std::cout << "KNN-NNDR特征匹配耗时(ms)：" << tmatch_knn << std::endl;
    return 0;
}