//标定、校正、SIFT匹配、测距
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <opencv2\xfeatures2d.hpp>
#include <iostream>
#include <fstream>
#include <opencv2\imgproc\types_c.h>
#include "vfc.h"

using namespace cv;
using namespace std;


//***************************参数以及初始化******************************//
//Matlab和OpenCV进行相机标定得到的参数矩阵全是互为转置的!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

const char* imageName_L = "../Images/1206-8mm-2602mm/A0.png"; // 用于检测深度的图像
const char* imageName_R = "../Images/1206-8mm-2602mm/B0.png";
const char* stereoRectifyParams = "./image/stereoRectifyParams.txt"; // 存放立体校正参数

Mat cameraMatrix_L = (cv::Mat_<float>(3, 3) << 1758.77667720632, 0.279226745063228, 625.625946148216,
	0, 1757.99844199530, 507.107936794840,
	0, 0, 1); // 左相机的内参数
Mat cameraMatrix_R = (cv::Mat_<float>(3, 3) << 1755.14940547475, 0.501649912236977, 631.214991270194,
	0, 1754.27796470277, 482.534096146445,
	0, 0, 1); // 右相机的内参数
//左右相机畸变系数 最后一个参数置0的话效果不一样
Mat distCoeffs_L = (Mat_<float>(1, 5) << -0.0934954931685911, 0.326306912697088, 3.45466701643577e-05, -0.000318033085229932, -0.525344303444370); // 左相机的畸变系数
Mat distCoeffs_R = (Mat_<float>(1, 5) << -0.0848605945510993, 0.212305665934113, -0.000585145907633591, -0.000718899576042846, -0.0908279577541819);// 右相机的畸变系数
//旋转矩阵
Mat R = (cv::Mat_<double>(3, 3) << 0.998950576820749, -0.0214417692637061, 0.0404361389225034,
	0.0202157170894231, 0.999330628013878, 0.0304896817948001,
	-0.0410628248258496, -0.0296402841455635, 0.998716825718428);

//平移矩阵
Mat T = (cv::Mat_<double>(3, 1) << -181.536578507112,
	0.126450133817349,
	4.80301053133881);
// 图像尺寸
Size imageSize(1280, 1024);

Mat R1, R2, P1, P2, Q; // 立体校正参数
Mat mapl1, mapl2, mapr1, mapr2; // 图像重投影映射表
Mat img1_rectified, img2_rectified, result3DImage; // 校正图像  深度图
Rect validRoi[2];


/*
立体校正
参数：
	stereoRectifyParams	存放立体校正结果的txt
	cameraMatrix			相机内参数
	distCoeffs				相机畸变系数
	imageSize				图像尺寸
	R						左右相机相对的旋转矩阵
	T						左右相机相对的平移向量
	R1, R2					行对齐旋转校正
	P1, P2					左右投影矩阵
	Q						重投影矩阵
	map1, map2				重投影映射表
*/

Rect stereoRectification(const char* stereoRectifyParams, Mat& cameraMatrix1, Mat& distCoeffs1, Mat& cameraMatrix2, Mat& distCoeffs2,
	Size& imageSize, Mat& R, Mat& T, Mat& R1, Mat& R2, Mat& P1, Mat& P2, Mat& Q, Mat& mapl1, Mat& mapl2, Mat& mapr1, Mat& mapr2)
{
	Rect validRoi[2];
	ofstream stereoStore(stereoRectifyParams);
	stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize,
		R, T, R1, R2, P1, P2, Q, CALIB_ZERO_DISPARITY, 0, imageSize, &validRoi[0], &validRoi[1]);
	// 计算左右图像的重投影映射表
	stereoStore << "R1：" << endl;
	stereoStore << R1 << endl;
	stereoStore << "R2：" << endl;
	stereoStore << R2 << endl;
	stereoStore << "P1：" << endl;
	stereoStore << P1 << endl;
	stereoStore << "P2：" << endl;
	stereoStore << P2 << endl;
	stereoStore << "Q：" << endl;
	stereoStore << Q << endl;
	stereoStore.close();
	cout << "R1:" << endl;
	cout << R1 << endl;
	cout << "R2:" << endl;
	cout << R2 << endl;
	cout << "P1:" << endl;
	cout << P1 << endl;
	cout << "P2:" << endl;
	cout << P2 << endl;
	cout << "Q:" << endl;
	cout << Q << endl;
	initUndistortRectifyMap(cameraMatrix1, distCoeffs1, R1, P1, imageSize, CV_32FC1, mapl1, mapl2);
	initUndistortRectifyMap(cameraMatrix2, distCoeffs2, R2, P2, imageSize, CV_32FC1, mapr1, mapr2);
	return validRoi[0], validRoi[1];
}
void draw_ellipse(Mat& image, vector<xfeatures2d::Elliptic_KeyPoint>& elliptic_keypoints, Mat& image_rgb)
{   // 彩色图像上进行判断与绘制
	if (1 == image.channels()) {
		image_rgb = Mat(Size(image.cols, image.rows), CV_8UC3);
		cvtColor(image, image_rgb, COLOR_GRAY2BGR);
	}
	else {
		image.copyTo(image_rgb);
	}
	Point center; // 中心点坐标
	Size axes;    // 椭圆长短轴
				  // 进行特征点椭圆绘制
	for (int i = 0; i < elliptic_keypoints.size(); ++i)
	{
		center.x = elliptic_keypoints[i].pt.x;
		center.y = elliptic_keypoints[i].pt.y;
		axes.width = elliptic_keypoints[i].axes.width;
		axes.height = elliptic_keypoints[i].axes.height;
		double angle = elliptic_keypoints[i].angle;  // 角度
													 // 绘制椭圆图像
		ellipse(image_rgb, center, axes, angle * 180 / CV_PI, 0, 360, Scalar(255, 255, 255), 2, 8);
		// 绘制中心点坐标
		circle(image_rgb, center, 1, Scalar(0, 0, 255));
	}
}

bool convertEllipseKptsToStandardKpts(const vector<xfeatures2d::Elliptic_KeyPoint>& elliptic_keypoints, vector<KeyPoint>& kpts)
{
	if (0 == elliptic_keypoints.size())
		return false;
	for (int i = 0; i < elliptic_keypoints.size(); ++i)
	{
		KeyPoint kpt;
		kpt.pt.x = elliptic_keypoints[i].pt.x;
		kpt.pt.y = elliptic_keypoints[i].pt.y;
		kpt.angle = elliptic_keypoints[i].angle;
		float diam = elliptic_keypoints[i].axes.height * elliptic_keypoints[i].axes.width;
		kpt.size = sqrt(diam);
		kpts.push_back(kpt);
	}
	return true;
}
/*
计算视差图
参数：
	imageName1	左相机拍摄的图像
	imageName2	右相机拍摄的图像
	img1_rectified	重映射后的左侧相机图像
	img2_rectified	重映射后的右侧相机图像
	map	重投影映射表
*/
bool computeDisparityImage(const char* imageName1, const char* imageName2, Mat& img1_rectified,
	Mat& img2_rectified, Mat& mapl1, Mat& mapl2, Mat& mapr1, Mat& mapr2, Rect validRoi[2])
{
	// 首先，对左右相机的两张图片进行重构
	Mat img1 = imread(imageName1);
	Mat img2 = imread(imageName2);
	if (img1.empty() | img2.empty())
	{
		cout << "图像为空" << endl;
	}
	Mat gray_img1, gray_img2;
	cvtColor(img1, gray_img1, COLOR_BGR2GRAY);
	cvtColor(img2, gray_img2, COLOR_BGR2GRAY);
	Mat canvas(imageSize.height, imageSize.width * 2, CV_8UC1); // 注意数据类型
	Mat canLeft = canvas(Rect(0, 0, imageSize.width, imageSize.height));
	Mat canRight = canvas(Rect(imageSize.width, 0, imageSize.width, imageSize.height));
	gray_img1.copyTo(canLeft);
	gray_img2.copyTo(canRight);
	imwrite("校正前左右相机图像.jpg", canvas);
	remap(gray_img1, img1_rectified, mapl1, mapl2, INTER_LINEAR);
	remap(gray_img2, img2_rectified, mapr1, mapr2, INTER_LINEAR);
	imwrite("左相机校正图像.jpg", img1_rectified);
	imwrite("右相机校正图像.jpg", img2_rectified);
	img1_rectified.copyTo(canLeft);
	img2_rectified.copyTo(canRight);
	rectangle(canLeft, validRoi[0], Scalar(255, 255, 255), 5, 8);
	rectangle(canRight, validRoi[1], Scalar(255, 255, 255), 5, 8);
	for (int j = 0; j <= canvas.rows; j += 16)
		line(canvas, Point(0, j), Point(canvas.cols, j), Scalar(0, 255, 0), 1, 8);
	imwrite("校正后左右相机图像.jpg", canvas);

	
	 img1 = imread("./image/img1_rectified.jpg");
	 img2 = imread("./image/img2_rectified.jpg");
	//img1 = img1_rectified;
	//img2 = img2_rectified;

	if (img1.empty() || img2.empty())
	{
		cout << "Reading the input image false!" << endl;
		return 0;
	}
	Mat img1gray, img2gray;   // Color convert to Gray Image for detection and descriptor
	if (img1.channels() == 3) {
		cvtColor(img1, img1gray, COLOR_BGR2GRAY);
	}
	else {
		img1.copyTo(img1gray);
	}
	if (img2.channels() == 3) {
		cvtColor(img2, img2gray, COLOR_BGR2GRAY);
	}
	else {
		img2.copyTo(img2gray);
	}
	//-- 初始化HarrisLaplace特征点检测
	Ptr<FeatureDetector> feature2D = xfeatures2d::HarrisLaplaceFeatureDetector::create();
	//-- 初始化SIFT 特征描述子																				  
	Ptr<DescriptorExtractor> descriptor2D = cv::SIFT::create();

	//-- Step 1: 提取特征点
	vector<xfeatures2d::Elliptic_KeyPoint> aff_kpts1, aff_kpts2;
	//-- 初始化仿射不变数据类   feature2D: 特征点提取方式  descriptor2D: 描述符提取方式
	Ptr<xfeatures2d::AffineFeature2D> affineFeature2D = xfeatures2d::AffineFeature2D::create(feature2D, descriptor2D);
	//-- 检测仿射特征点
	affineFeature2D->detect(img1gray, aff_kpts1);
	affineFeature2D->detect(img2gray, aff_kpts2);
	//-- 检测到的特征点集信息数据结构 Elliptic_KeyPoint 转换 KeyPoint
	vector<KeyPoint> kpts1, kpts2;
	convertEllipseKptsToStandardKpts(aff_kpts1, kpts1);
	convertEllipseKptsToStandardKpts(aff_kpts2, kpts2);

	//-- Step 2: 计算特征点与描述符
	Mat desc1, desc2;
	//-- 灰度图像输入计算特征描述符   入参最后true/false true表示外部提供特征点(false则表示相反)
	affineFeature2D->detectAndCompute(img1gray, Mat(), aff_kpts1, desc1, true);
	affineFeature2D->detectAndCompute(img2gray, Mat(), aff_kpts2, desc2, true);

	//-- Step 3: 匹配特征描述符
	FlannBasedMatcher matcher;
	vector<DMatch> matches;
	matcher.match(desc1, desc2, matches);
	//-- Step 4: 通过VFC移除错误匹配点对
	vector<Point2f> X;  vector<Point2f> Y;
	X.clear();   Y.clear();

	for (unsigned int i = 0; i < matches.size(); i++) {
		int idx1 = matches[i].queryIdx;
		int idx2 = matches[i].trainIdx;
		X.push_back(kpts1[idx1].pt);
		Y.push_back(kpts2[idx2].pt);
	}
	//-- VFC process
	double t = (double)getTickCount();
	VFC myvfc;
	myvfc.setData(X, Y);
	myvfc.optimize();
	vector<int> matchIdx = myvfc.obtainCorrectMatch();
	t = ((double)getTickCount() - t) / getTickFrequency();
	cout << "VFC Times (s): " << t << endl;

	vector< DMatch > correctMatches;
	correctMatches.clear();
	for (unsigned int i = 0; i < matchIdx.size(); i++) {
		int idx = matchIdx[i];
		correctMatches.push_back(matches[idx]);
	}
	//-- 绘制匹配结果图
	Mat img_Matches;
	drawMatches(img1, kpts1, img2, kpts2, correctMatches, img_Matches, Scalar::all(-1), \
		Scalar::all(-1), vector<char>(), DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);
	
	/********相似三角形测距法 计算距离*******/
	double B = sqrt(T.at<double>(0, 0) * T.at<double>(0, 0) + T.at<double>(1, 0) * T.at<double>(1, 0) + T.at<double>(2, 0) * T.at<double>(2, 0));
	double f = Q.at<double>(2, 3);
	double avr_dis = 0;
	double max_dis = LONG_MIN, min_dis = LONG_MAX;
	Point origin;
	cout << "f = " << f << endl;
	cout << "B = " << B << endl;
	cout << "匹配成功且筛选后特征点对数： " << correctMatches.size() << endl;
	cout << "********************************************" << endl;
	for (int i = 0; i < correctMatches.size(); i++)
	{
		double x_L = kpts1[correctMatches[i].queryIdx].pt.x;
		double x_R = kpts2[correctMatches[i].trainIdx].pt.x;
		origin.x = kpts1[correctMatches[i].queryIdx].pt.x;
		origin.y = kpts1[correctMatches[i].queryIdx].pt.y;

		putText(img_Matches, to_string(correctMatches[i].queryIdx), origin, cv::FONT_HERSHEY_SIMPLEX, 0.4, Scalar(0, 0, 255), 1);
		double distance = f * B / abs(x_L - x_R);
		//cout << "x_L = " << x_L << endl;
		//cout << "x_R = " << x_R << endl;
		cout << to_string(correctMatches[i].queryIdx) << " 点的x坐标为: " << x_L << " 求得的距离为： " << distance << " mm" << endl;
	}
	imshow("Harris_Flann匹配", img_Matches);
	imwrite("./image/harrisAffine匹配.png", img_Matches);
	
	return true;
}

// 鼠标回调函数，点击视差图显示深度
void onMouse(int event, int x, int y, int flags, void* param)
{
	Point point;
	point.x = x;
	point.y = y;
	if (event == EVENT_LBUTTONDOWN)
	{
		cout << result3DImage.at<Vec3f>(point) << endl;
	}
}

int main()
{
	//进行立体校正
	validRoi[0], validRoi[1] = stereoRectification(stereoRectifyParams, cameraMatrix_L, distCoeffs_L, cameraMatrix_R, distCoeffs_R,
		imageSize, R, T, R1, R2, P1, P2, Q, mapl1, mapl2, mapr1, mapr2);
	cout << "已创建图像重投影映射表！" << endl;
	//SIFT特征点提取与匹配
	computeDisparityImage(imageName_L, imageName_R, img1_rectified, img2_rectified, mapl1, mapl2, mapr1, mapr2, validRoi);

	waitKey(0);  //等待键盘输入
	return 0;
}



